###datasource
spring.datasource.url=jdbc:mysql:///fantasticfunicular?characterEncoding=utf8&useUnicode=true&useSSL=false&serverTimezone=UTC
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root
# -----------------------------
# update
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql= true
# spring.jpa.properties.hibernate.hbm2ddl.auto=create/create-drop/update/validate
# create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
# create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。
# update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
# validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
# dialect 主要是指定生成表名的存储引擎为 InnoDBD
# show-sql 是否打印出自动生成的 SQL，方便调试的时候查看

# 格式为：'logging.level.* = LEVEL'
#logging.level：日志级别控制前缀，*为包名或Logger名
#LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF

# com.supertrampai.springbootsimplefilter 包下所有class以DEBUG级别输出
logging.level.com.supertrampai.springbootsimplefilter.*=DEBUG
# root日志以WARN级别输出
logging.level.root=WARN

# 按如下规则组织配置文件名，就能被正确加载
# Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
# Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
# Log4j2：log4j2-spring.xml, log4j2.xml
# JDK (Java Util Logging)：logging.properties

# https://blog.csdn.net/Inke88/article/details/75007649